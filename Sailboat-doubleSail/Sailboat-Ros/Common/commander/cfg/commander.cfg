#!/usr/bin/env python
PACKAGE = "commander"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

control_mode_enum = gen.enum([ gen.const("manual",      int_t, 0, "manual mode"),
                               gen.const("autopilot",     int_t, 1, "autopilot mode"),
                               gen.const("position",      int_t, 2, "position mode"),
                               gen.const("pathfollow", int_t, 3, "pathfollow mode"),
                               gen.const("return", int_t, 4, "return mode"),
                               gen.const("direct", int_t, 5, "direct mode")],
                             "An enum to set control mode")

gen.add("vehicle_control_new_state", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 5, edit_method=control_mode_enum)

planning_mode_enum = gen.enum([ gen.const("manual", int_t, 0, "manual mode"),
                                gen.const("astar" , int_t, 1, "astar mode" ),
                                gen.const("speed" , int_t, 2, "speed mode" ),
                                gen.const("direct", int_t, 3, "direct mode")],
                              "An enum to set planning mode")

gen.add("path_planning_new_state", int_t, 0, "A size parameter which is edited via an enum", 0, 0, 3, edit_method=planning_mode_enum)

gen.add("is_auto"  ,   bool_t,   0, "is_auto"  ,  False)
gen.add("is_reset_home"  ,   bool_t,   0, "is_reset_home"  ,  False)

gen.add("is_filter_control",   bool_t,   0, "is_filter_control",  True)
gen.add("is_tack_control"  ,   bool_t,   0, "is_tack_control"  ,  True)
gen.add("is_jibing_control",   bool_t,   0, "is_jibing_control",  True)

gen.add("is_avoidance_plan",   bool_t,   0, "is_avoidance_plan",  False)
gen.add("is_tack_plan"  ,   bool_t,   0, "is_tack_plan"  ,  True)

exit(gen.generate(PACKAGE, "commander", "commander_"))

